{"version":3,"sources":["file:///D:/MyPersonalsProject/MindYourStep/assets/Script/GameManager.ts"],"names":["_decorator","Component","Prefab","instantiate","Node","Label","CCInteger","Vec3","PlayerController","ccclass","property","BlockType","GameState","GameManager","type","_road","_curState","GS_INIT","start","curState","playerCtrl","node","on","onPlayerJumpEnd","init","startMenu","active","generateRoad","setInputActive","setPosition","ZERO","reset","value","GS_PLAYING","stepsLabel","string","setTimeout","GS_END","removeAllChildren","push","BT_STONE","i","roadLength","BT_NONE","Math","floor","random","j","length","block","spawnBlockByType","addChild","cubePrfb","onStartButtonClicked","checkResult","moveIndex"],"mappings":"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","sourcesContent":["import { _decorator, Component, Prefab, instantiate, Node, Label, CCInteger, Vec3 } from 'cc';\nimport { PlayerController } from \"./PlayerController\";\nconst { ccclass, property } = _decorator;\n\nenum BlockType{\n    BT_NONE,\n    BT_STONE,\n};\n\nenum GameState{\n    GS_INIT,\n    GS_PLAYING,\n    GS_END,\n};\n\n@ccclass(\"GameManager\")\nexport class GameManager extends Component {\n\n    @property({type: Prefab})\n    public cubePrfb: Prefab|null = null;\n    @property({type: CCInteger})\n    public roadLength: Number = 50;\n    private _road: number[] = [];\n    @property({type: Node})\n    public startMenu: Node|null = null;\n    @property({type: PlayerController})\n    public playerCtrl: PlayerController|null = null;\n    private _curState: GameState = GameState.GS_INIT;\n    @property({type: Label})\n    public stepsLabel: Label|null = null;\n\n    start () {\n        this.curState = GameState.GS_INIT;\n        this.playerCtrl?.node.on('JumpEnd', this.onPlayerJumpEnd, this);\n    }\n\n    init() {\n        if (this.startMenu) {\n            this.startMenu.active = true;\n        }\n\n        this.generateRoad();\n\n        if (this.playerCtrl) {\n            this.playerCtrl.setInputActive(false);\n            this.playerCtrl.node.setPosition(Vec3.ZERO);\n            this.playerCtrl.reset();\n        }\n    }\n\n    set curState (value: GameState) {\n        switch(value) {\n            case GameState.GS_INIT:\n                this.init();\n                break;\n            case GameState.GS_PLAYING:\n                if (this.startMenu) {\n                    this.startMenu.active = false;\n                }\n\n                if (this.stepsLabel) {\n                    //  reset the number of steps to 0\n                    this.stepsLabel.string = '0';\n                }\n                // set active directly to start listening for mouse events directly\n                setTimeout(() => {\n                    if (this.playerCtrl) {\n                        this.playerCtrl.setInputActive(true);\n                    }\n                }, 0.1);\n                break;\n            case GameState.GS_END:\n                break;\n        }\n        this._curState = value;\n    }\n\n    generateRoad() {\n\n        this.node.removeAllChildren();\n\n        this._road = [];\n        // startPos\n        this._road.push(BlockType.BT_STONE);\n\n        for (let i = 1; i < this.roadLength; i++) {\n            if (this._road[i-1] === BlockType.BT_NONE) {\n                this._road.push(BlockType.BT_STONE);\n            } else {\n                this._road.push(Math.floor(Math.random() * 2));\n            }\n        }\n\n        for (let j = 0; j < this._road.length; j++) {\n            let block: Node = this.spawnBlockByType(this._road[j]);\n            if (block) {\n                this.node.addChild(block);\n                block.setPosition(j, -1.5, 0);\n            }\n        }\n    }\n\n    spawnBlockByType(type: BlockType) {\n        if (!this.cubePrfb) {\n            return null;\n        }\n\n        let block: Node|null = null;\n        switch(type) {\n            case BlockType.BT_STONE:\n                block = instantiate(this.cubePrfb);\n                break;\n        }\n\n        return block;\n    }\n\n    onStartButtonClicked() {\n        this.curState = GameState.GS_PLAYING;\n    }\n\n    checkResult(moveIndex: number) {\n        if (moveIndex <= this.roadLength) {\n            if (this._road[moveIndex] == BlockType.BT_NONE) {\n                // ump to the empty square\n                this.curState = GameState.GS_INIT;\n            }\n        } else {\n            // skipped the maximum length\n            this.curState = GameState.GS_INIT;\n        }\n    }\n\n    onPlayerJumpEnd(moveIndex: number) {\n        if (this.stepsLabel) {\n            this.stepsLabel.string = '' + moveIndex;\n        }\n        this.checkResult(moveIndex);\n    }\n\n    // update (deltaTime: number) {\n    //     // Your update function goes here.\n    // }\n}\n\n"]}