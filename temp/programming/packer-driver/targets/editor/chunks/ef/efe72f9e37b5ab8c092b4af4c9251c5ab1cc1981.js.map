{"version":3,"sources":["file:///C:/Users/ASUS/MindYourStep_1/assets/Script/PlayerController.ts"],"names":["_decorator","Component","Vec3","input","Input","Animation","ccclass","property","PlayerController","type","_startJump","_jumpStep","_curJumpTime","_jumpTime","_curJumpSpeed","_curPos","_deltaPos","_targetPos","_isMoving","start","on","EventType","MOUSE_UP","onMouseUp","event","getButton","jumpByStep","step","node","getPosition","add","onOnceJumpEnd","update","deltaTime","setPosition","x"],"mappings":"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","sourcesContent":["import { _decorator, Component, Vec3, input, Input, EventMouse, Animation } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"PlayerController\")\nexport class PlayerController extends Component {\n    /* class member could be defined like this */\n    // dummy = '';\n\n    /* use `property` decorator if your want the member to be serializable */\n    @property({type: Animation})\n    public BodyAnim: Animation|null = null;\n    // serializableDummy = 0;\n\n    // for fake tween\n    private _startJump: boolean = false;\n    private _jumpStep: number = 0;\n    private _curJumpTime: number = 0;\n    private _jumpTime: number = 0.1;\n    private _curJumpSpeed: number = 0;\n    private _curPos: Vec3 = new Vec3();\n    private _deltaPos: Vec3 = new Vec3(0, 0, 0);\n    private _targetPos: Vec3 = new Vec3();\n    private _isMoving = false;\n\n    start () {\n        // Your initialization goes here.\n        input.on(Input.EventType.MOUSE_UP, this.onMouseUp, this);\n    }\n\n    onMouseUp(event: EventMouse) {\n        if (event.getButton() === 0) {\n            this.jumpByStep(1);\n        } else if (event.getButton() === 2) {\n            this.jumpByStep(2);\n        }\n\n    }\n\n    jumpByStep(step: number) {\n        if (this._isMoving) {\n            return;\n        }\n        this._startJump = true;\n        this._jumpStep = step;\n        this._curJumpTime = 0;\n        this._curJumpSpeed = this._jumpStep / this._jumpTime;\n        this.node.getPosition(this._curPos);\n        Vec3.add(this._targetPos, this._curPos, new Vec3(this._jumpStep, 0, 0));\n\n        this._isMoving = true;\n    }\n\n    onOnceJumpEnd() {\n        this._isMoving = false;\n    }\n\n    update (deltaTime: number) {\n        if (this._startJump) {\n            this._curJumpTime += deltaTime;\n            if (this._curJumpTime > this._jumpTime) {\n                // end\n                this.node.setPosition(this._targetPos);\n                this._startJump = false;\n                this.onOnceJumpEnd();\n            } else {\n                // tween\n                this.node.getPosition(this._curPos);\n                this._deltaPos.x = this._curJumpSpeed * deltaTime;\n                Vec3.add(this._curPos, this._curPos, this._deltaPos);\n                this.node.setPosition(this._curPos);\n            }\n        }\n    }\n}\n"]}